version: "3.8"

services:
  # === üß± BOOKING DB + SERVICE ===
  booking-db:
    image: postgres:15
    container_name: booking-db
    environment:
      POSTGRES_USER: booking
      POSTGRES_PASSWORD: booking
      POSTGRES_DB: booking
    ports:
      - "5455:5432"
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    networks:
      - hotelio-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking -d booking"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s

  booking-service:
    build:
      context: ../../microservices
      dockerfile: booking-service/Dockerfile
    container_name: booking-service
    ports:
      - "9090:8080" # gRPC
      - "9091:8081" # HTTP healthcheck
    environment:
      ConnectionStrings__DefaultConnection: "Host=booking-db;Database=booking;Username=booking;Password=booking"
      Kafka__BootstrapServers: "kafka:29092"
    networks:
      - hotelio-net
    depends_on:
      booking-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        /wait-for-it.sh booking-db:5432 --timeout=90 --strict -- &&
        /wait-for-it.sh kafka:29092 --timeout=90 --strict -- &&
        dotnet booking-service.dll
      "
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8081' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 120s

  # === üìö HISTORY DB + SERVICE ===
  history-db:
    image: postgres:15
    container_name: history-db
    environment:
      POSTGRES_USER: history
      POSTGRES_PASSWORD: history
      POSTGRES_DB: history
    ports:
      - "5434:5432"
    volumes:
      - history-db-data:/var/lib/postgresql/data
    networks:
      - hotelio-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U history -d history"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  booking-history-service:
    build:
      context: ../../microservices/booking_history_service
      dockerfile: Dockerfile
    container_name: booking-history-service
    environment:
      ConnectionStrings__DefaultConnection: "Host=history-db;Database=history;Username=history;Password=history"
      Kafka__BootstrapServers: "kafka:29092"
    networks:
      - hotelio-net
    depends_on:
      history-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        /wait-for-it.sh history-db:5432 --timeout=60 --strict -- &&
        /wait-for-it.sh kafka:29092 --timeout=60 --strict -- &&
        dotnet booking-history-service.dll
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # === ü¶ç KAFKA STACK ===
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - hotelio-net
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo stat | timeout 5 bash -c '< /dev/tcp/localhost/2181' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - hotelio-net
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "timeout 10 bash -c '< /dev/tcp/localhost/29092' || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka-init:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - kafka
    command: >
      bash -c "
        kafka-topics --create --if-not-exists --topic booking-confirmed --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic booking-cancelled --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic user-validation-result --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic hotel-validation-result --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic promo-validation-result --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic review-validation-result --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic booking-validation-request --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1
      "
    networks:
      - hotelio-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - hotelio-net
    depends_on:
      kafka:
        condition: service_healthy

  # === üß© MONOLITH + DB ===
  monolith-db:
    image: postgres:15
    container_name: hotelio-db
    environment:
      POSTGRES_USER: hotelio
      POSTGRES_PASSWORD: hotelio
      POSTGRES_DB: hotelio
    ports:
      - "5433:5432"
    volumes:
      - monolith-db-data:/var/lib/postgresql/data
    networks:
      - hotelio-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotelio -d hotelio"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  monolith:
    build:
      context: ../monolith
      dockerfile: Dockerfile
    container_name: hotelio-monolith
    ports:
      - "8084:8080"
    networks:
      - hotelio-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://monolith-db:5432/hotelio
      SPRING_DATASOURCE_USERNAME: hotelio
      SPRING_DATASOURCE_PASSWORD: hotelio
      BOOKING_SERVICE_EXTERNAL_HOST: booking-service
      BOOKING_SERVICE_EXTERNAL_PORT: 8080
    depends_on:
      monolith-db:
        condition: service_healthy
      booking-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/8080' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s

  # === üöÄ GraphQL Federation ===
  booking-subgraph:
    build: ./booking-subgraph
    container_name: booking-subgraph
    ports:
      - "4001:4001"
    networks:
      - hotelio-net
    depends_on:
      booking-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:4001/.well-known/apollo/server-health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  hotel-subgraph:
    build: ./hotel-subgraph
    container_name: hotel-subgraph
    ports:
      - "4002:4002"
    networks:
      - hotelio-net
    depends_on:
      monolith:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:4002/.well-known/apollo/server-health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  apollo-gateway:
    build: ./gateway
    container_name: apollo-gateway
    ports:
      - "4000:4000"
    networks:
      - hotelio-net
    depends_on:
      - booking-subgraph
      - hotel-subgraph
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:4000/.well-known/apollo/server-health || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  monolith-db-data:
  booking-db-data:
  history-db-data:
  kafka-data:
  zookeeper-data:

networks:
  hotelio-net:
    external: true
